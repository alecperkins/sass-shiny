// The icon set definition. Needs to be defined as a list of a name and lists:
// $icon_set: ( 'font-family-name', (icon-name '\e800', icon-2 '\e801') )
$icon_set: false !default



// Public: scope the given properties under the selector used for the icons.
//         Provides a way to add properties to the icon without duplicating
//         the properties needed to generate the icon itself.
//
// $after - (optional: false) a Boolean indicating that the `:after` pseudo
//            selector should be used instead of `:before`.
//
@mixin icon-selector($after: false)
    @if $after
        &:after
            @content
    @else
        &:before
            @content



// Public: add an icon to the parent selector using a `:before` or `:after`
//         pseudo element using an icon font.
//
// $set         - (optional: $icon_set) The set of icons to use that names the
//                  font-family and maps the icon names to unicode characters.
// $name        - The string name of the icon, corresponding to the mapping
//                  defined in the $set used.
// $code_only   - (optional: false) a Boolean indicating that only the
//                  `content` property should be set, instead of both `content`
//                  and `font-family`.
// $after       - (optional: false) a Boolean indicating that the `:after`
//                  pseudo selector should be used instead of `:before`.
//
// Example:
//
//     .SearchField
//         +icon('search')
//
//     .SearchField
//         color: black
//         +icon($CustomIcons, 'search')
//             color: gray
//
@mixin icon($set: $icon_set, $name: false, $code_only: false, $after: false)
    @if not $name
        $name: $set
        $set: $Icons
    @if not $set
        @warn "Icon set not defined"
    @else
        $icon_code: false
        @each $icon in nth($set,2)
            @if nth($icon, 1) == $name
                $icon_code: nth($icon, 2)

        @if not $icon_code
            @warn "Icon #{ $name } not found"
        @else
            +icon-selector($after)
                content: $icon_code
                @if not $code_only
                    font-family: nth($set,1)
                @content

// Public: Get the unicode character code from the given icon set for a given
//         icon name.
//
// $set     - (optional: $icon_set) The icon set to use.
// $name    - The string name of the icon to retrieve.
//
// Returns the string unicode character code.
@function icon-value($set: $icon_set, $name: false)
    @if not $name
        $name: $set
        $set: $icon_set
    $icon_code: false
    @each $icon in nth($set,2)
        @if nth($icon, 1) == $name
            $icon_code: nth($icon, 2)

    @if not $icon_code
        @warn "Icon #{ $name } not found"
        $icon_code: ""

    @return $icon_code


// Public: Generate bare class selectors for direct usage of icons in markup.
//         The icons will be grouped under a single Component class, then each
//         icon is available under a variant.
//
// $set     - (optional: $icon_set) The icon set to use.
// $name    - (optional: Icon) The name of the Component selector.
@mixin generate-icon-selectors($set: $icon_set, $name: Icon)
    %#{ $name }
        font-family: nth($set,1)
        @each $icon in nth($set,2)
            &.-#{ nth($icon,1) }
                +icon($set: $set, $name: nth($icon,1), $code_only: true)


